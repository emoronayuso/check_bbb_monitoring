#!/usr/bin/python

import urllib, urllib2, socket
import hashlib, random
from xml.dom import minidom 
from xml.dom.minidom import Node 
import argparse



def bbb_wrap_load_file(url):
    timeout = 10
    socket.setdefaulttimeout(timeout)

    try:
        req = urllib2.urlopen(url)
        return minidom.parse(req)
    except:
        return False
        

def assign2Dict(xml):
    try:
        mapping = {}
        response = xml.firstChild
        for child in response.childNodes:
            
            if( child.hasChildNodes() ):
                mapping[child.tagName] = child.firstChild.nodeValue
            else:
                mapping[child.tagName] = None
                                
        return mapping
    except:
        return False


def getMeetingsURL(URL, SALT):
    base_url = URL + "api/getMeetings?"

    parameters = {'random' : (random.random() * 1000 ),}
    parameters = urllib.urlencode(parameters)
    
    return base_url + parameters + '&checksum=' + hashlib.sha1("getMeetings" + parameters + SALT).hexdigest()



#-----------------------------------------------getMeetings------------------------------------------------------
#
#This method calls getMeetings on the bigbluebutton server, then calls getMeetingInfo for each meeting and concatenates the result.
#
#@param URL -- the url of the bigbluebutton server
#@param SALT -- the security salt of the bigbluebutton server
#
#@return  
#    - None if unable to reach the bigbluebutton server
#    - Dictionary containing the values of the xml packet
#        - If the returncode == 'FAILED' it returns a dictionary containing a returncode, messagekey, and message. 
#        - If the returncode == 'SUCCESS' it returns a dictionary containing all the meetings. Each item  meetingID, moderatorPW, attendeePW, 
#          hasBeenForciblyEnded, running, startTime, endTime, participantCount, moderatorCount, and attendees.

#    - Null if the server is unreachable
#    - If FAILED then returns an array containing a returncode, messageKey, message.
#    - If SUCCESS then returns an array of all the meetings. Each element in the array is an array containing a meetingID, 
#     moderatorPW, attendeePW, hasBeenForciblyEnded, running.
#
def getMeetings( URL, SALT ):
    getMeetings_url = getMeetingsURL( URL, SALT )
    xml = bbb_wrap_load_file( getMeetings_url )
    
    if(xml):  
        mapping = {}
        response = xml.firstChild
        for child in response.childNodes:
            
            if( child.hasChildNodes() ):
                
                #Makes a dictionary for meetings inside mapping
                if(child.tagName == "meetings"):
                    meetings = {}
                    
                    #Makes a dictionary for meeting inside meetings
                    for mtgs in child.childNodes:
                        meeting = {}
                        
                        #Adds the elements to the meeting dictionary
                        for mtg in mtgs.childNodes:
                            if( mtg.hasChildNodes() ):
                                meeting[mtg.tagName] = mtg.firstChild.nodeValue
                            else:
                                meeting[mtg.tagName] = None
                        #Updates the meetings dictionary with the meeting we just parsed
                        meetings[ meeting["meetingID"] ] = meeting
                    #Once completed parsing the meetings we add that dictionary to mapping
                    mapping[child.tagName] = meetings
                                   
                else:
                    mapping[child.tagName] = child.firstChild.nodeValue    
            else:
                mapping[child.tagName] = None
                   
        return mapping
    
    #if unable to reach the server
    return None


#
#This method returns the url to getMeetingInfo of the specified meeting.
#
#@param meetingID -- the unique meeting identifier used to store the meeting in the bigbluebutton server
#@param modPW -- the moderator password of the meeting
#@param SALT -- the security salt of the bigbluebutton server
#@param URL -- the url of the bigbluebutton server
#
#@return The url to check if the specified meeting is running.
#
def getMeetingInfoURL( meetingID, modPW, URL, SALT ):
    base_url = URL + "api/getMeetingInfo?"
    
    parameters = {'meetingID' : meetingID,
                  'password' : modPW,
                  }
    parameters = urllib.urlencode(parameters)
    
    return base_url + parameters + '&checksum=' + hashlib.sha1("getMeetingInfo" + parameters + SALT).hexdigest()  



#-------------------------------------------getMeetingInfo---------------------------------------------------
#
#This method calls the getMeetingInfo on the bigbluebutton server and returns an array.
#
#@param meetingID -- the unique meeting identifier used to store the meeting in the bigbluebutton server
#@param modPW -- the moderator password of the meeting
#@param SALT -- the security salt of the bigbluebutton server
#@param URL -- the url of the bigbluebutton server
#
#@return 
#    - None if unable to reach the bigbluebutton server
#    - Dictionary containing the values of the xml packet
#        - If the returncode == 'FAILED' it returns a dictionary containing a returncode, messagekey, and message. 
#        - If the returncode == 'SUCCESS' it returns a dictionary containing a meetingID, moderatorPW, attendeePW, 
#          hasBeenForciblyEnded, running, startTime, endTime, participantCount, moderatorCount, and attendees.

def getMeetingInfo( meetingID, modPW, URL, SALT ):
    getMeetingInfo_url = getMeetingInfoURL(meetingID, modPW, URL, SALT )
    xml = bbb_wrap_load_file( getMeetingInfo_url )

    if(xml):  
        mapping = {}
        response = xml.firstChild
        for child in response.childNodes:
            
            if( child.hasChildNodes() ):
                #Makes a dictionary for attendees inside mapping
                if(child.tagName == "attendees"):
                    attendees = {}
                    #Makes a dictionary for attendee inside attendees
                    for atnds in child.childNodes:
                        attendee = {}
                        #Adds the elements to the attendee dictionary
                        for atnd in atnds.childNodes:
                            if( atnd.hasChildNodes() ):
                                attendee[atnd.tagName] = atnd.firstChild.nodeValue
                            else:
                                attendee[atnd.tagName] = None
                        #Updates the attendees dictionary with the attendee we just parsed
                        attendees[ attendee["userID"] ] = attendee
                    
                    #Once completed parsing the attendees we add that dictionary to mapping
                    mapping[child.tagName] = attendees                    
                else:
                    mapping[child.tagName] = child.firstChild.nodeValue    
            else:
                mapping[child.tagName] = None
        return mapping
    
    #if unable to reach the server
    return None





def participant_count(host, salt):
    total_users = 0
    total_meetings = 0
    meetings = []

    if getMeetings(host, salt)['meetings'] != None:
        meetings = getMeetings(host, salt)
        for meeting, value in meetings['meetings'].iteritems():
            total_users += int(getMeetingInfo( meeting, value['moderatorPW'], host, salt)['participantCount'])
            total_meetings += 1 

    print "users_connected.value " + str(total_users)
    print "meetings_created.value " + str(total_meetings)

def main():

    parser = argparse.ArgumentParser()
    requiredNamed = parser.add_argument_group('required named arguments')
    requiredNamed.add_argument("-H","--host", required=True, help="Nombre del servidor de Bigbluebutton")
    requiredNamed.add_argument("-S","--salt", required=True, help="Salt del servidor")
    args = parser.parse_args()

    participant_count(args.host, args.salt)


if __name__ == "__main__":
    main()
